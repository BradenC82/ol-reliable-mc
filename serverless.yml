# Service name
service: ol-reliable-mc
# Launches an EC2 instance and security group, enabling http and ssh access to the instance

provider:
  name: aws
  
custom:
  AvailabilityZoneName:
    !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'

# Framework version constraint (semver constraint): '3', '^2.33'
frameworkVersion: "3"

# Insert raw CloudFormation (resources, outputsâ€¦) in the deployed template
resources:
  Parameters:
    # CIDR of VPC
    VPCCIDR:
      Description: CIDR of the new VPC
      Type: String
      Default: 10.0.0.0/16

    # CIDR of new subnet within this VPC
    VPCPubSubnetCIDR:
      Description: CIDR of the new subnet within this VPC
      Type: String
      Default: 10.0.1.0/24

    # AZ Name where subnet will be created
    # AvailabilityZoneName:
    #   Description: CIDR of the new VPC
    #   Type: AWS::EC2::AvailabilityZone::Name
    #   Default: 

  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: !Ref VPCCIDR
        EnableDnsHostnames: True
        EnableDnsSupport: True
        InstanceTenancy: default
        Tags:
          - Key: Name
            Value: ol-reliable-mc-vpc
          - Key: Application
            Value: !Ref "AWS::StackName"

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ol-reliable-mc-vpc-igw
          - Key: Application
            Value: !Ref "AWS::StackName"

    InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

    #Create Public Subnets
    VPCPubSub:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ${self:custom.AvailabilityZoneName}
        CidrBlock: !Ref VPCPubSubnetCIDR
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value:
              Fn::Sub:
                - "public-subnet-${AZName}"
                - AZName: ${self:custom.AvailabilityZoneName}
          - Key: Application
            Value: !Ref "AWS::StackName"
        VpcId: !Ref VPC

    #Create Route Table
    VPCPubRT:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: ol-reliable-mc-rt
          - Key: Application
            Value: !Ref "AWS::StackName"

    # Add routes entries for public network through igw
    PubRT:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref VPCPubRT
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    #Associate Subnets
    VPCPubSubRTAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId: !Ref VPCPubRT
        SubnetId: !Ref VPCPubSub

    # # NACL
    # myPublicNACL:
    #   Type: 'AWS::EC2::NetworkAcl'
    #   Properties:
    #     VpcId: !Ref myVPC
    #     Tags:
    #       - Key: Name
    #         Value: demo-vpc-nacl
    #       - Key: Application
    #         Value: !Ref 'AWS::StackName'

    # # Allow all Incoming TCP traffic
    # myNaclRulesForInboundTCP:
    #   Type: 'AWS::EC2::NetworkAclEntry'
    #   Properties:
    #     NetworkAclId: !Ref myPublicNACL
    #     RuleNumber: 100
    #     Protocol: 6  # tcp
    #     RuleAction: allow
    #     Egress: false  # this rule applies to ingress traffic to the subnet
    #     CidrBlock: 0.0.0.0/0  # any ip address
    #     PortRange:
    #       From: 0
    #       To: 65535

    # # Allow all Outgoing TCP traffic
    # myNaclRulesForOutboundTCP:
    #   Type: 'AWS::EC2::NetworkAclEntry'
    #   Properties:
    #     NetworkAclId: !Ref myPublicNACL
    #     RuleNumber: 100
    #     Protocol: 6  # tcp
    #     RuleAction: allow
    #     Egress: true  # this rule applies to egress traffic from the subnet
    #     CidrBlock: 0.0.0.0/0
    #     PortRange:
    #       From: 0  # client will be using ephemeral port, using 80 or 22 here will not work
    #       To: 65535

    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: This group will allow all HTTP and SSH traffic
        GroupName: AllowAllHTTPTraffic
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 25565
            ToPort: 25565
            CidrIp: 0.0.0.0/0
        Tags:
          - Key: Name
            Value: InstanceSecurityGroup

    UbuntuInstance:
      Type: AWS::EC2::Instance
      Properties:
        KeyName: minecraft-host-key # Existing ssh key pair
        ImageId: "ami-0c7217cdde317cfec" # Ubuntu, 22.04 LTS, 64-bit(x86)
        InstanceType: t2.micro
        SubnetId: !Ref VPCPubSub
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        Tags:
          - Key: Name
            Value: Ubuntu Server
        UserData:
          Fn::Base64: "${file(startup.sh)}"

  Outputs:
    outputInstanceSecurityGroup:
      Description: A reference to the created security group
      Value: !Ref InstanceSecurityGroup
    outputUbuntuInstance:
      Description: A reference to the created EC2 Instance
      Value: !Ref UbuntuInstance
